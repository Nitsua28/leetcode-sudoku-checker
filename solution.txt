
import java.util.Hashtable;
class Solution {
    public boolean isValidSudoku(char[][] board) {
        Rows rows = new Rows();
        Columns columns = new Columns();
        Blocks blocks = new Blocks();

        for (byte i = 0; i < 9; i++){
            for (byte j = 0; j < 9; j++){
                char num = board[i][j];
                if (num == '.') continue;

                if (
                //rows
                rows.checkNumIfValid(num, i)
                &&

                //columns
                columns.checkNumIfValid(num, j)
                &&
                //blocks
                blocks.checkNumIfValid(num, i, j)
                )
                continue;
                else return false;
            }
        }
        return true;
    }
}

abstract class ValidChecker{
    private static Hashtable[] table = new Hashtable[9];
    public ValidChecker(){
        for (int i = 0; i < table.length; i++){
            table[i] = new Hashtable<Character,Character>();
        }
        
    };

    public boolean checkNumIfValid(char num, byte section){
        System.out.println(table[section]);
        if (table[section].containsKey(num)) {
            //System.out.println("ROC "+false);
            return false;
        }

        table[section].put(num, '1');
        //System.out.println("ROC "+true);
        return true;

    }
}

class Rows extends ValidChecker{
    private static Hashtable[] table = new Hashtable[9];
    public Rows(){
        for (int i = 0; i < table.length; i++){
            table[i] = new Hashtable<Character,Character>();
        }
        
    };
    public boolean checkNumIfValid(char num, byte section){
        System.out.println(table[section]);
        if (table[section].containsKey(num)) {
            //System.out.println("R "+false);
            return false;
        }

        table[section].put(num, '1');
        //System.out.println("R "+true);
        return true;

    }

}

class Columns extends ValidChecker{
    private static Hashtable[] table = new Hashtable[9];
    public Columns(){
        for (int i = 0; i < table.length; i++){
            table[i] = new Hashtable<Character,Character>();
        }
        
    };
    public boolean checkNumIfValid(char num, byte section){
        //System.out.println(table[section]);
        if (table[section].containsKey(num)) {
            //System.out.println("C "+false);
            return false;
        }

        table[section].put(num, '1');
        //System.out.println("C "+true);
        return true;

    }

}

class Blocks extends ValidChecker{
    private static Hashtable[] table = new Hashtable[9];
    public Blocks(){
        for (int i = 0; i < table.length; i++){
            table[i] = new Hashtable<Character,Character>();
        }
        
    };
    
    public boolean checkNumIfValid(char num, byte rowSection, byte columnSection){
        
        rowSection = (byte) Math.ceil((double)(rowSection + 1)/ 3);
        
        byte section = 0;
        
        switch(rowSection){
            case 1:
                
                if(columnSection < 3)section = 0;
                else if (columnSection < 6)section = 1;
                else section = 2;
                break;
            case 2:
                
                if(columnSection < 3)section = 3;
                else if (columnSection < 6)section = 4;
                else section = 5;
                break;
            case 3:
                
                if(columnSection < 3)section = 6;
                else if (columnSection < 6)section = 7;
                else section = 8;
                break;
            default:
                
                break;
        }
        //System.out.println(section);
        //System.out.println(table[section]);
        if (table[section].containsKey(num)) {
            
            return false;
        }

        table[section].put(num, '1');
        
        return true;

        

    }
}


